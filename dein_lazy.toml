[[plugins]] #cmd
repo = 'b4b4r07/vim-shellutils'

[[plugins]] #python syntax
repo = 'davidhalter/jedi-vim'
on_ft = 'python'

[[plugins]] #python syntax
repo = 'zchee/deoplete-jedi'
on_ft = 'python'

# [[plugins]] #julia syntax
# repo = 'JuliaEditorSupport/julia-vim'
# on_ft = 'julia'

[[plugins]] #vuejs syntax
repo = 'posva/vim-vue'
on_ft = 'vue'

[[plugins]] #pug syntax
repo = 'digitaltoad/vim-pug'
on_ft = 'pug'

[[plugins]] #C# syntax
repo = 'OmniSharp/omnisharp-vim'
depends = 'vim-dispatch'
on_ft = 'cs'
build = 'xbuild server/OmniSharp.sln'

[[plugins]] #C# syntax hilight
repo = 'OrangeT/vim-csharp'
on_ft = 'cs'

[[plugins]] #ominsharp, server
repo = 'tpope/vim-dispatch'
on_ft = 'cs'

[[plugins]] #toml syntax
repo = 'cespare/vim-toml'
on_ft = 'toml'

[[plugins]] #markdown syntax
repo = 'kannokanno/previm'
on_ft = 'markdown'

[[plugins]] #markdown syntax
repo = 'tyru/open-browser.vim'
on_ft = 'markdown'
hook_add = '''
  au BufRead,BufNewFile *.md set filetype=markdown
  let g:previm_open_cmd = 'open -a FirefoxDeveloperEdition'
  let g:vim_markdown_folding_disabled=1
'''

[[plugins]] #markdown syntax
repo = 'plasticboy/vim-markdown'
on_ft = 'markdown'
hook_add = '''
  let g:vim_markdown_folding_style_pythonic = 1
  let g:vim_markdown_toc_autofit = 1
  let g:vim_markdown_conceal = 0
  nmap <silent> <C-f><C-m> :<C-u>Toc<CR>
  xmap <silent> <C-f><C-m> :<C-u>Toc<CR>
'''


[[plugins]] #text align
repo = 'junegunn/vim-easy-align'
on_i = 1
hook_add = '''
  xmap ga <Plug>(EasyAlign)
  nmap ga <Plug>(EasyAlign)
'''


[[plugins]] #complete blanket
repo = 'cohama/lexima.vim'
on_i = 1
hook_post_source = '''
  let g:lexima_no_default_rules = 1
  call lexima#set_default_rules()

  function! s:set_lexima(rule)
      call lexima#add_rule(a:rule)
      let ignore_rule = a:rule
      let ignore_rule.syntax = ["String", "Comment"]
      let ignore_rule.input = ignore_rule.char
      call lexima#add_rule(ignore_rule)
  endfunction


  call s:set_lexima({'at': '\%#',     'char': '[',    'input': '[]<Left>'})
  call s:set_lexima({'at': '\%#]',    'char': '[',    'input': '['})
  call s:set_lexima({'at': '\[\%#\]', 'char': ']',    'input': '<Right>'})
  call s:set_lexima({'at': '\[\%#\]', 'char': '[',    'input': '[]<Left>'})
  call s:set_lexima({'at': '\[\%#\]', 'char': '<BS>', 'input': '<BS><Del>'})


  for [begin, end] in [['(', ')'], ['{', '}']]
      let bracket = begin.end
      call s:set_lexima({'at': '\%#',     'char': begin, 'input': bracket.'<Left>'})
      call s:set_lexima({'at': '\%#'.end, 'char': begin, 'input': begin})

      call s:set_lexima({'at': begin.'\%#'.end, 'char': end,   'input': '<Right>'})
      call s:set_lexima({'at': begin.'\%#'.end, 'char': begin, 'input': bracket.'<Left>'})
      call s:set_lexima({'at': begin.'\%#'.end, 'char': '<BS>', 'input': '<BS><Del>'})
  endfor
'''

[[plugins]]
repo = 'Shougo/deoplete.nvim'
hook_source = '''
  let g:deoplete#enable_at_startup = 1
  inoremap <expr><TAB>
        \ pumvisible() ? "\<C-n>" :
        \ neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
  snoremap <expr><TAB> neosnippet#expandable_or_jumpable() ?
        \ "\<Plug>(neosnippet_expand_or_jump)" : "\<TAB>"
'''
on_i = 1

[[plugins]]
repo = 'Shougo/neosnippet-snippets'

[[plugins]]
repo = 'Shougo/neosnippet'
hook_source = '''
  imap <C-i> <Plug>(neosnippet_expand_or_jump)
  smap <C-i> <plug>(neosnippet_expand_or_jump)
  xmap <C-i> <plug>(neosnippet_expand_target)
  if has('conceal')
    set conceallevel=2 concealcursor=niv
  endif
'''
on_i  = 1
on_ft = ['snippet']
depends = ['neosnippet-snippets']

[[plugins]]
repo      = 'Shougo/neomru.vim'
on_source = ['denite.vim']
on_path = '.*'
hook_post_source = '''
call denite#custom#var('grep', 'default_opts', [])
call denite#custom#var('grep', 'recursive_opts', [])
'''

